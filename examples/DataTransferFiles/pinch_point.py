# -*- coding: utf-8 -*-"""This file is part of PyFrac.Created by Haseeb Zia on Fri March 13 2018.Copyright (c) "ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland, Geo-Energy Laboratory", 2016-2019. All rights reserved.See the LICENSE.TXT file for more details."""# importsimport numpy as npfrom mesh import CartesianMeshfrom properties import MaterialProperties, FluidProperties, InjectionProperties, SimulationPropertiesfrom fracture import Fracturefrom controller import Controllerfrom fracture_initialization import Geometry, InitializationParameters# creating meshMesh = CartesianMesh(0.04,0.4, 61,601)# solid propertiesnu = 0.25                           # Poisson's ratioyoungs_mod = 20                     # Young's modulusEprime = youngs_mod / (1 - nu ** 2) # plain strain modulusK_Ic = 1                            # set toughness to a very low value# def sigmaO_func(x, y):##     """ The function providing the confining stress variation with space"""####     if abs(y)>0.05 and abs(y)<0.07:##         sigma0 = 75.e6##     elif abs(y) < 0.05:##         sigma0 = 5.0e6##     else:##         sigma0 = 0.1e6####     if abs(x) > 0.1:##         sigma0 = 85.e6####     return sigma0def sigmaO_func(x, y):    """ This function provides the confining stress over the domain"""    density_high = 1000    density_low = 2400    #layer = 1000    Ly = 2000    #if y > layer:        #return (Ly - y) * density_low * 9.8    # only dependant on the depth    #return (Ly - y) * density_high * 9.8 - (Ly - layer) * (density_high - density_low) * 9.8    return (Ly - y) * density_high * 9.81Solid = MaterialProperties(Mesh,                           Eprime,                           K_Ic,                           confining_stress_func=sigmaO_func)# injection parametersQ0 = 0.0Injection = InjectionProperties(Q0, Mesh,source_coordinates=[0, -0.37])# fluid propertiesFluid = FluidProperties(viscosity=1, density=980)# simulation propertiessimulProp = SimulationProperties()simulProp.finalTime = 5e3             # the time at which the simulation stopssimulProp.gravity = True                    # set up the gravity flagsim_name = "028_pc_A"simulProp.set_simulation_name(sim_name)simulProp.set_outputFolder("./Data/neutral_buoyancy") # the disk address where the files are savedsimulProp.tolFractFront = 3e-3              # increase the tolerance for fracture front iterationsimulProp.solveStagnantTip = TruesimulProp.saveRegime = TruesimulProp.solveTipCorrRib = TruesimulProp.elastohydrSolver = 'implicit_Anderson'simulProp.plotTSJump = 3                    # plot every fourth time stepsimulProp.saveTSJump = 5                    # save every second time stepsimulProp.maxSolverItrs = 200simulProp.reAttemptFactor = 0.5simulProp.tmStpPrefactor = np.asarray([[0, 80000], [1, 1]]) # set up the time step prefactorsimulProp.plotVar = ['footprint','w']simulProp.bckColor = 'confining stress'           # the parameter according to which the background is color codedsimulProp.plotFigure = True             # the fracture footprint will be plotted during the simulationsimulProp.saveToDisk= True#simulProp.timeStepLimit = 0.5           # time step limit#simulProp.projMethod = 'LS_continousfront'# initializing fractureFr_geometry = Geometry('radial', radius=0.01)init_param = InitializationParameters(Fr_geometry, regime='M')# creating fracture object# Fr = Fracture(Mesh,##               init_param,##               Solid,##               Fluid,##               Injection,##               simulProp)from postprocess_fracture import load_fracturesFr = load_fractures(address="./Data/neutral_buoyancy",                    sim_name=sim_name,)[0][-1]# create a Controllercontroller = Controller(Fr,                        Solid,                        Fluid,                        Injection,                        simulProp)# run the simulationcontroller.run()##################### plotting results ###################### loading resultsFr_list, properties = load_fractures(address='/Users/amoeri/Documents/PyFrac_Programms/PyFrac/examples/Data/neutral_buoyancy/028_pc_A__2019-11-01__08_18_29')## # plotting fracture width slice for last six time steps# plt_prop = PlotProperties(line_style='.-')# Fig = plot_fracture_list_slice(Fr_list[-6:],#                                 variable='w',#                                 point1=[-0.09, -Fr_list[-1].mesh.Ly],#                                 plot_cell_center=True,#                                 orientation='vertical',#                                 plot_prop=plt_prop)## plt.show()